#include <iostream>
#include <cstdlib>
#include <queue>
#include <cstdio>
#include <algorithm>
using namespace std;

typedef struct process {
    int id, at, bt, remaining_bt, completion_time, pr;
    float wt, tat;
} process;

process p[10], p1[10], temp;
queue<int> q1;

// Function declarations
int accept(int ch);
void turnwait(int n);
void display(int n);
void fcfs(int n);
void sjf_non_preemptive(int n);
void sjf_preemptive(int n);
void priority_non_preemptive(int n);
void priority_preemptive(int n, int* gantt_chart);
void ganttrr(int n);
void gantt_fcfs(int n);
void gantt_sjf(int n);
void gantt_priority_preemptive(int n, int* gantt_chart);

// Main function
int main() {
    int n, ch;
    cout << "Choose Scheduling Algorithm:\n";
    cout << "1. FCFS\n";
    cout << "2. SJF (Non-Preemptive)\n";
    cout << "3. SJF (Preemptive - SRTF)\n";
    cout << "4. Preemptive Priority Scheduling\n";
    cout << "5. Non-Preemptive Priority Scheduling\n";
    cout << "6. Round Robin\n";
    cin >> ch;

    n = accept(ch);

    switch (ch) {
        case 1:
            fcfs(n);
            break;
        case 2:
            sjf_non_preemptive(n);
            break;
        case 3:
            sjf_preemptive(n);
            break;
        case 4: {
            int gantt_chart[100] = {0};
            priority_preemptive(n, gantt_chart);
            turnwait(n);
            display(n);
            gantt_priority_preemptive(n, gantt_chart);
            return 0;
        }
        case 5:
            priority_non_preemptive(n);
            break;
        case 6:
            ganttrr(n);
            break;
        default:
            cout << "Invalid choice!" << endl;
            exit(1);
    }

    if (ch != 4) {
        turnwait(n);
        display(n);
    }

    return 0;
}

// Accept input from user
int accept(int ch) {
    int i, n;
    cout << "Enter the Total Number of Processes: ";
    cin >> n;
    if (n == 0) {
        cout << "Invalid number of processes!" << endl;
        exit(1);
    }

    for (i = 1; i <= n; i++) {
        cout << "Enter the Arrival Time of Process P" << i << ": ";
        cin >> p[i].at;
        p[i].id = i;
    }

    for (i = 1; i <= n; i++) {
        cout << "Enter the Burst Time of Process P" << i << ": ";
        cin >> p[i].bt;
        p[i].remaining_bt = p[i].bt;
    }

    if (ch == 3 || ch == 4 || ch == 5) {
        for (i = 1; i <= n; i++) {
            cout << "Enter the Priority of Process P" << i << ": ";
            cin >> p[i].pr;
        }
    }

    for (i = 1; i <= n; i++) {
        p1[i] = p[i];
    }

    return n;
}

// Calculate Turnaround and Waiting Times
void turnwait(int n) {
    for (int i = 1; i <= n; i++) {
        p[i].tat = p[i].completion_time - p[i].at;
        p[i].wt = p[i].tat - p[i].bt;
        p[0].tat += p[i].tat;
        p[0].wt += p[i].wt;
    }
    p[0].tat /= n;
    p[0].wt /= n;
}

// Display Process Info
void display(int n) {
    cout << "\n=================== Result Table ======================\n";
    cout << "Process\tAT\tBT\tCT\tTAT\t\tWT\n";
    for (int i = 1; i <= n; i++) {
        printf("P%d\t%d\t%d\t%d\t%f\t%f\n", p[i].id, p[i].at, p[i].bt, p[i].completion_time, p[i].tat, p[i].wt);
    }
    cout << "\nAverage Turn Around Time: " << p[0].tat;
    cout << "\nAverage Waiting Time: " << p[0].wt << "\n";
}

// FCFS Scheduling
void fcfs(int n) {
    int current_time = 0;
    sort(p + 1, p + n + 1, [](process a, process b) {
        return a.at < b.at;
    });

    for (int i = 1; i <= n; i++) {
        if (current_time < p[i].at)
            current_time = p[i].at;

        p[i].completion_time = current_time + p[i].bt;
        current_time = p[i].completion_time;
    }
    gantt_fcfs(n);
}

// Gantt Chart FCFS
void gantt_fcfs(int n) {
    cout << "\nGantt Chart for FCFS Scheduling\n";
    for (int i = 1; i <= n; i++) {
        cout << "P" << p[i].id << " ";
    }
    cout << endl;
}

// SJF Non-Preemptive
void sjf_non_preemptive(int n) {
    int completed = 0, current_time = 0;
    bool is_completed[10] = {false};

    while (completed < n) {
        int min_bt = 9999, idx = -1;
        for (int i = 1; i <= n; i++) {
            if (!is_completed[i] && p[i].at <= current_time && p[i].bt < min_bt) {
                min_bt = p[i].bt;
                idx = i;
            }
        }

        if (idx != -1) {
            current_time += p[idx].bt;
            p[idx].completion_time = current_time;
            is_completed[idx] = true;
            completed++;
        } else {
            current_time++;
        }
    }
    gantt_sjf(n);
}

// Gantt Chart for SJF
void gantt_sjf(int n) {
    cout << "\nGantt Chart for SJF Scheduling\n";
    for (int i = 1; i <= n; i++) {
        cout << "P" << p[i].id << " ";
    }
    cout << endl;
}

// SJF Preemptive (SRTF)
void sjf_preemptive(int n) {
    int completed = 0, current_time = 0;
    int current_process = -1;
    bool is_completed[10] = {false};

    while (completed < n) {
        int shortest_time = 9999, next_process = -1;

        for (int i = 1; i <= n; i++) {
            if (!is_completed[i] && p[i].at <= current_time && p[i].remaining_bt < shortest_time && p[i].remaining_bt > 0) {
                shortest_time = p[i].remaining_bt;
                next_process = i;
            }
        }

        if (next_process != -1) {
            current_process = next_process;
            p[current_process].remaining_bt--;
            current_time++;

            if (p[current_process].remaining_bt == 0) {
                p[current_process].completion_time = current_time;
                is_completed[current_process] = true;
                completed++;
                current_process = -1;
            }
        } else {
            current_time++;
        }
    }
}

// Priority Non-Preemptive
void priority_non_preemptive(int n) {
    int completed = 0, current_time = 0;
    bool is_completed[10] = {false};

    while (completed < n) {
        int min_priority = 9999, idx = -1;
        for (int i = 1; i <= n; i++) {
            if (!is_completed[i] && p[i].at <= current_time && p[i].pr < min_priority) {
                min_priority = p[i].pr;
                idx = i;
            }
        }

        if (idx != -1) {
            current_time += p[idx].bt;
            p[idx].completion_time = current_time;
            is_completed[idx] = true;
            completed++;
        } else {
            current_time++;
        }
    }
}

// Priority Preemptive
void priority_preemptive(int n, int* gantt_chart) {
    int completed = 0, current_time = 0, current_process = -1;
    bool is_completed[10] = {false};

    while (completed < n) {
        int highest_priority = 9999, next_process = -1;

        for (int i = 1; i <= n; i++) {
            if (!is_completed[i] && p[i].at <= current_time && p[i].pr < highest_priority && p[i].remaining_bt > 0) {
                highest_priority = p[i].pr;
                next_process = i;
            }
        }

        if (next_process != -1) {
            current_process = next_process;
            p[current_process].remaining_bt--;
            gantt_chart[current_time] = current_process;
            current_time++;

            if (p[current_process].remaining_bt == 0) {
                p[current_process].completion_time = current_time;
                is_completed[current_process] = true;
                completed++;
                current_process = -1;
            }
        } else {
            gantt_chart[current_time] = 0;
            current_time++;
        }
    }
}

// Gantt Chart for Priority Preemptive
void gantt_priority_preemptive(int n, int* gantt_chart) {
    cout << "\nGantt Chart for Preemptive Priority Scheduling\n";
    for (int i = 0; i < 20; i++) {
        if (gantt_chart[i] != 0)
            cout << "P" << gantt_chart[i] << " ";
        else
            cout << "Idle ";
    }
    cout << endl;
}

// Round Robin
void ganttrr(int n) {
    int i = 1, ts, m, nextval;
    nextval = p1[1].at;
    cout << "\nEnter the Time Slice or Quantum: ";
    cin >> ts;

    while (i <= n && p1[i].at <= nextval) {
        q1.push(p1[i].id);
        i++;
    }

    while (!q1.empty()) {
        m = q1.front(); q1.pop();

        if (p1[m].bt >= ts) nextval += ts;
        else nextval += p1[m].bt;

        if (p1[m].bt >= ts) p1[m].bt -= ts;
        else p1[m].bt = 0;

        while (i <= n && p1[i].at <= nextval) {
            q1.push(p1[i].id);
            i++;
        }

        if (p1[m].bt > 0) q1.push(m);
        else p[m].completion_time = nextval;
    }
}
