#include <iostream>
#include <fstream>   // For file operations
#include <string>    // For string handling

using namespace std;

void copyFile(const string& source, const string& destination) {
    ifstream inFile(source);
    ofstream outFile(destination);

    if (!inFile) {
        cerr << "Error: Cannot open source file.\n";
        return;
    }
    if (!outFile) {
        cerr << "Error: Cannot open/create destination file.\n";
        return;
    }

    string line;
    while (getline(inFile, line)) {
        outFile << line << endl;
    }

    cout << "File copied successfully.\n";

    inFile.close();
    outFile.close();
}

void grepFile(const string& pattern, const string& filename) {
    ifstream file(filename);

    if (!file) {
        cerr << "Error: Cannot open file.\n";
        return;
    }

    string line;
    int lineNum = 1;
    bool found = false;
    while (getline(file, line)) {
        if (line.find(pattern) != string::npos) {
            cout << "Line " << lineNum << ": " << line << endl;
            found = true;
        }
        lineNum++;
    }

    if (!found)
        cout << "Pattern not found.\n";

    file.close();
}

int main() {
    int choice;

    do {
        cout << "\n--- Menu ---\n";
        cout << "1. Copy File (cp)\n";
        cout << "2. Search in File (grep)\n";
        cout << "3. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        cin.ignore(); // Flush newline from input buffer

        switch (choice) {
            case 1: {
                string src, dest;
                cout << "Enter source file name: ";
                getline(cin, src);
                cout << "Enter destination file name: ";
                getline(cin, dest);
                copyFile(src, dest);
                break;
            }
            case 2: {
                string pattern, file;
                cout << "Enter pattern to search: ";
                getline(cin, pattern);
                cout << "Enter file name: ";
                getline(cin, file);
                grepFile(pattern, file);
                break;
            }
            case 3:
                cout << "Exiting program.\n";
                break;
            default:
                cout << "Invalid choice! Try again.\n";
        }

    } while (choice != 3);

    return 0;
}








#include <iostream>
#include <unistd.h>     // fork, execvp, getpid
#include <sys/wait.h>   // wait
#include <stdlib.h>     // exit
#include <cstring>      // strerror
using namespace std;

void run_command(const char* command[], const string& desc) {
    pid_t pid = fork();

    if (pid < 0) {
        cerr << "Fork failed!\n";
        exit(EXIT_FAILURE);
    } else if (pid == 0) {
        // Child process
        cout << "[Child " << getpid() << "] Executing " << desc << "...\n";
        if (execvp(command[0], (char* const*)command) == -1) {
            cerr << "Error executing command: " << strerror(errno) << endl;
            exit(EXIT_FAILURE);
        }
    } else {
        // Parent process
        cout << "[Parent " << getpid() << "] Waiting for child process...\n";
        wait(NULL);
        cout << "[Parent " << getpid() << "] Child process completed.\n";
    }
}

int main() {
    cout << "Linux Command Simulator with fork(), exec(), wait(), getpid(), and exit()\n";

    // Command 1: cp source.txt destination.txt
    const char* cp_cmd[] = {"cp", "source.txt", "destination.txt", NULL};
    run_command(cp_cmd, "copy file using cp");

    // Command 2: grep "search_term" file.txt
    const char* grep_cmd[] = {"grep", "main", "destination.txt", NULL};
    run_command(grep_cmd, "search text using grep");

    cout << "All processes completed. Exiting main process.\n";
    return 0;
}
