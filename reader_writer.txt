#include <iostream>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

using namespace std;

int data = 0;
int read_count = 0;

pthread_mutex_t mutex;
sem_t wrt;

void* reader_sync(void* arg) {
    int id = *((int*)arg);

    pthread_mutex_lock(&mutex);
    read_count++;
    if (read_count == 1)
        sem_wait(&wrt);
    pthread_mutex_unlock(&mutex);

    cout << "🔒 Reader " << id << " is reading data = " << data << endl;
    sleep(1);

    pthread_mutex_lock(&mutex);
    read_count--;
    if (read_count == 0)
        sem_post(&wrt);
    pthread_mutex_unlock(&mutex);

    return nullptr;
}

void* writer_sync(void* arg) {
    int id = *((int*)arg);

    sem_wait(&wrt);
    data += 10;
    cout << "🔒 Writer " << id << " wrote data = " << data << endl;
    sleep(1);
    sem_post(&wrt);

    return nullptr;
}

void* reader_no_sync(void* arg) {
    int id = *((int*)arg);
    cout << "❌ Reader " << id << " is reading data = " << data << endl;
    sleep(1);
    return nullptr;
}

void* writer_no_sync(void* arg) {
    int id = *((int*)arg);
    data += 10;
    cout << "❌ Writer " << id << " wrote data = " << data << endl;
    sleep(1);
    return nullptr;
}

int main() {
    int choice;
    pthread_t readers[5], writers[5];
    int ids[5] = {1, 2, 3, 4, 5};

    cout << "==== Reader-Writer Problem with Switch Menu ====\n";
    cout << "1. Run WITHOUT Synchronization\n";
    cout << "2. Run WITH Synchronization\n";
    cout << "Enter your choice: ";
    cin >> choice;

    if (choice == 2) {
        pthread_mutex_init(&mutex, nullptr);
        sem_init(&wrt, 0, 1);
    }

    for (int i = 0; i < 5; ++i) {
        if (choice == 1) {
            pthread_create(&writers[i], nullptr, writer_no_sync, &ids[i]);
            pthread_create(&readers[i], nullptr, reader_no_sync, &ids[i]);
        } else if (choice == 2) {
            pthread_create(&writers[i], nullptr, writer_sync, &ids[i]);
            pthread_create(&readers[i], nullptr, reader_sync, &ids[i]);
        } else {
            cout << "Invalid choice!" << endl;
            return 1;
        }
    }

    for (int i = 0; i < 5; ++i) {
        pthread_join(writers[i], nullptr);
        pthread_join(readers[i], nullptr);
    }

    if (choice == 2) {
        pthread_mutex_destroy(&mutex);
        sem_destroy(&wrt);
    }

    return 0;
}







#include <iostream>
#include <pthread.h>
#include <unistd.h>
#include <cstdlib>

using namespace std;

int data = 0;
int readCount = 0;
pthread_mutex_t mutexLock;
pthread_mutex_t writeLock;

void* unsyncedReader(void* arg) {
    int id = *((int*)arg);
    usleep(rand() % 500000); // Random delay
    cout << "❌ [UNSYNCED] Reader " << id << " is reading data = " << data << endl;
    return nullptr;
}

void* unsyncedWriter(void* arg) {
    int id = *((int*)arg);
    data = rand() % 100;
    usleep(rand() % 500000); // Random delay
    cout << "❌ [UNSYNCED] Writer " << id << " wrote data = " << data << endl;
    return nullptr;
}

void* syncedReader(void* arg) {
    int id = *((int*)arg);
    usleep(rand() % 500000); // Random delay
    pthread_mutex_lock(&mutexLock);
    readCount++;
    if (readCount == 1)
        pthread_mutex_lock(&writeLock); // First reader locks the writer
    pthread_mutex_unlock(&mutexLock);

    cout << "🔒 [SYNCED] Reader " << id << " is reading data = " << data << endl;

    pthread_mutex_lock(&mutexLock);
    readCount--;
    if (readCount == 0)
        pthread_mutex_unlock(&writeLock); // Last reader unlocks the writer
    pthread_mutex_unlock(&mutexLock);
    return nullptr;
}

void* syncedWriter(void* arg) {
    int id = *((int*)arg);
    usleep(rand() % 500000); // Random delay
    pthread_mutex_lock(&writeLock);
    data = rand() % 100;
    cout << "🔒 [SYNCED] Writer " << id << " wrote data = " << data << endl;
    pthread_mutex_unlock(&writeLock);
    return nullptr;
}

int main() {
    srand(time(0));
    pthread_t readers[3], writers[2];
    int ids[] = {1, 2, 3};

    pthread_mutex_init(&mutexLock, nullptr);
    pthread_mutex_init(&writeLock, nullptr);

    cout << "\n=== ❌ WITHOUT SYNCHRONIZATION ===\n";
    pthread_create(&writers[0], nullptr, unsyncedWriter, &ids[0]);
    pthread_create(&readers[0], nullptr, unsyncedReader, &ids[0]);
    pthread_create(&writers[1], nullptr, unsyncedWriter, &ids[1]);
    pthread_create(&readers[1], nullptr, unsyncedReader, &ids[1]);
    pthread_create(&readers[2], nullptr, unsyncedReader, &ids[2]);

    for (int i = 0; i < 2; i++)
        pthread_join(writers[i], nullptr);
    for (int i = 0; i < 3; i++)
        pthread_join(readers[i], nullptr);

    sleep(1); // Separate output

    cout << "\n=== 🔒 WITH SYNCHRONIZATION ===\n";
    pthread_create(&writers[0], nullptr, syncedWriter, &ids[0]);
    pthread_create(&readers[0], nullptr, syncedReader, &ids[0]);
    pthread_create(&writers[1], nullptr, syncedWriter, &ids[1]);
    pthread_create(&readers[1], nullptr, syncedReader, &ids[1]);
    pthread_create(&readers[2], nullptr, syncedReader, &ids[2]);

    for (int i = 0; i < 2; i++)
        pthread_join(writers[i], nullptr);
    for (int i = 0; i < 3; i++)
        pthread_join(readers[i], nullptr);

    pthread_mutex_destroy(&mutexLock);
    pthread_mutex_destroy(&writeLock);

    return 0;
}


